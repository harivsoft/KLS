/*package com.vsoftcorp.kls.dataccess.impl;import org.apache.log4j.Logger;import org.dbunit.Assertion;import org.dbunit.dataset.IDataSet;import org.dbunit.dataset.ITable;import org.dbunit.dataset.SortedTable;import org.dbunit.dataset.filter.DefaultColumnFilter;import org.junit.AfterClass;import org.junit.Assert;import org.junit.BeforeClass;import org.junit.Test;import com.vsoftcorp.dbunit.DBUnitTC;import com.vsoftcorp.kls.business.entities.Branch;import com.vsoftcorp.kls.business.entities.Crop;import com.vsoftcorp.kls.dataaccess.IBranchDAO;import com.vsoftcorp.kls.dataaccess.ICropDAO;import com.vsoftcorp.kls.dataaccess.factory.KLSDataAccessFactory;import com.vsoftcorp.kls.util.EntityManagerUtil;public class BranchDAOTest extends DBUnitTC {	private static final Logger logger = Logger.getLogger(BranchDAOTest.class);	public BranchDAOTest() {		super("dbunit.properties");	}	@BeforeClass	public static void setupHibernate() {		EntityManagerUtil.init("klsTestPU");	}	@AfterClass	public static void teardownHibernate() {		logger.info("After Class Teardown shutdown");		EntityManagerUtil.closeSession();	}	@Test	public void testSaveBranch() {		logger.info("Executing the test case saveBranch()");		try {			Branch branch = new Branch();			branch.setName("Cuttack");			branch.setLocation("Patnaik Nagar");			branch.setCode("OR01");			IBranchDAO branchDao = KLSDataAccessFactory.getBranchDAO();			branchDao.saveBranch(branch);			IDataSet actualDataSet1 = getConnection().createDataSet();			IDataSet expectedDataSet1 = getExpectedDataSet();			ITable expected1 = null;			ITable actual1 = null;			expected1 = new SortedTable(expectedDataSet1.getTable("branch"));			actual1 = actualDataSet1.getTable("branch");			actual1 = new SortedTable(DefaultColumnFilter.includedColumnsTable(					actual1, expected1.getTableMetaData().getColumns()),					expected1.getTableMetaData());			Assertion.assertEquals(expected1, actual1);			Assert.assertEquals(expected1.getRowCount(), actual1.getRowCount());			Assert.assertEquals("Cuttack", actual1.getValue(0, "name"));					} catch (Exception e) {			e.printStackTrace();			throw new RuntimeException(					"Exception thrown while running the testSaveBranch() dbunit test case.",					e.getCause());		}		logger.info("Executed the test case saveBranch()");	}	@Test	public void testUpdateBranch() {		logger.info("Executing the db unit test case updateBranch()");		try {			Branch branch = new Branch();			branch.setId(11112);			branch.setName("Cuttack");			branch.setLocation("Patnaik Nagar");			branch.setCode("OR01");			IBranchDAO dao = KLSDataAccessFactory.getBranchDAO();			IDataSet actualDataSet1 = getConnection().createDataSet();			IDataSet expectedDataSet1 = getExpectedDataSet();			ITable expected1 = null;			ITable actual1 = null;			expected1 = new SortedTable(expectedDataSet1.getTable("branch"));			actual1 = actualDataSet1.getTable("branch");			actual1 = new SortedTable(DefaultColumnFilter.includedColumnsTable(					actual1, expected1.getTableMetaData().getColumns()),					expected1.getTableMetaData());			Branch dbBranch = dao.getBranch(branch);			dbBranch.setName("Cuttack");			dbBranch.setLocation("Patnaik Nagar");			dao.updateBranch(branch);			actual1 = actualDataSet1.getTable("branch");			Assert.assertEquals(expected1.getValue(0, "name"),					actual1.getValue(0, "name"));		} catch (Exception e) {			e.printStackTrace();			throw new RuntimeException(					"Exception thrown while running the testupdateBranch() dbunit test case.",					e.getCause());		}		logger.info("Executed the db unit test case updateBranch()");	}	@Test	public void testGetBranch() {		logger.info("Executing the db unit test case getBranch()");		try {						Branch branch = new Branch();			branch.setId(11111);			IBranchDAO branchDao = KLSDataAccessFactory.getBranchDAO();			Branch c = branchDao.getBranch(branch);			Assert.assertEquals("Cuttack", c.getName().trim());					} catch (Exception e) {			e.printStackTrace();			throw new RuntimeException(					"Exception thrown while running the testGetBranch() dbunit test case.",					e.getCause());		}		logger.info("Executed the db unit test case getBranch()");	}}*/