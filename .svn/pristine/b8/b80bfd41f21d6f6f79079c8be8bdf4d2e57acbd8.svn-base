/*package com.vsoftcorp.kls.dataccess.impl;import org.apache.log4j.Logger;import org.dbunit.dataset.IDataSet;import org.dbunit.dataset.ITable;import org.dbunit.dataset.SortedTable;import org.dbunit.dataset.filter.DefaultColumnFilter;import org.junit.AfterClass;import org.junit.Assert;import org.junit.BeforeClass;import org.junit.Test;import com.vsoftcorp.dbunit.DBUnitTC;import com.vsoftcorp.kls.business.entities.District;import com.vsoftcorp.kls.dataaccess.IDistrictDAO;import com.vsoftcorp.kls.dataaccess.factory.KLSDataAccessFactory;import com.vsoftcorp.kls.util.EntityManagerUtil;public class DistrictDAOTest extends DBUnitTC {	private static final Logger logger = Logger			.getLogger(DistrictDAOTest.class);	public DistrictDAOTest() {		super("dbunit.properties");	}	@BeforeClass	public static void setupHibernate() {		EntityManagerUtil.init("klsTestPU");	}	@AfterClass	public static void teardownHibernate() {		logger.info("After Class Teardown shutdown");		EntityManagerUtil.closeSession();	}	@Test	public void testSaveDistrict() {		logger.info("Executing the test case saveDistrict()");		try {			District districtMaster = new District();			districtMaster.setName("Hyderabad");			districtMaster.setDccBankCode("TS1");			IDistrictDAO dao = KLSDataAccessFactory.getDistrictDAO();			dao.saveDistrict(districtMaster);			IDataSet actualDataSet1 = getConnection().createDataSet();			IDataSet expectedDataSet1 = getExpectedDataSet();			ITable expected1 = null;			ITable actual1 = null;			expected1 = new SortedTable(expectedDataSet1.getTable("district"));			actual1 = actualDataSet1.getTable("district");			actual1 = new SortedTable(DefaultColumnFilter.includedColumnsTable(					actual1, expected1.getTableMetaData().getColumns()),					expected1.getTableMetaData());			Assert.assertEquals(expected1.getValue(0, "name"),					actual1.getValue(0, "name"));		} catch (Exception e) {			throw new RuntimeException(					"Exception thrown while running the testSaveDistrict() dbunit test case.",					e.getCause());		}		logger.info("Executed the test case saveDistrict()");	}	@Test	public void testUpdateDistrict() {		logger.info("Executing the db unit test case updateDistrict()");		try {			District district = new District();			district.setName("Hyderabad");			district.setDccBankCode("TS1");			IDistrictDAO dao = KLSDataAccessFactory.getDistrictDAO();			IDataSet actualDataSet1 = getConnection().createDataSet();			IDataSet expectedDataSet1 = getExpectedDataSet();			ITable expected1 = null;			ITable actual1 = null;			expected1 = new SortedTable(expectedDataSet1.getTable("district"));			actual1 = actualDataSet1.getTable("district");			Integer districtId = (Integer) actual1.getValue(0, "id");			district.setId(districtId);			actual1 = new SortedTable(DefaultColumnFilter.includedColumnsTable(					actual1, expected1.getTableMetaData().getColumns()),					expected1.getTableMetaData());			dao.updateDistrict(district);			actual1 = actualDataSet1.getTable("district");			Assert.assertEquals(expected1.getValue(0, "name"),					actual1.getValue(0, "name"));		} catch (Exception e) {			e.printStackTrace();			throw new RuntimeException(					"Exception thrown while running the testupdateVillage() dbunit test case.",					e.getCause());		}		logger.info("Executed the db unit test case updateDistrict()");	}}*/