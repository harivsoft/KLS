/*package com.vsoftcorp.kls.dataccess.impl;import java.math.BigDecimal;import java.math.BigInteger;import java.text.SimpleDateFormat;import org.apache.log4j.Logger;import org.dbunit.dataset.IDataSet;import org.dbunit.dataset.ITable;import org.dbunit.dataset.SortedTable;import org.dbunit.dataset.filter.DefaultColumnFilter;import org.junit.AfterClass;import org.junit.Assert;import org.junit.BeforeClass;import org.junit.Test;import com.vsoftcorp.dbunit.DBUnitTC;import com.vsoftcorp.kls.business.entities.Branch;import com.vsoftcorp.kls.business.entities.District;import com.vsoftcorp.kls.business.entities.EventTypeDefinition;import com.vsoftcorp.kls.business.entities.InterestCategory;import com.vsoftcorp.kls.business.entities.Pacs;import com.vsoftcorp.kls.business.entities.PacsGl;import com.vsoftcorp.kls.business.entities.Product;import com.vsoftcorp.kls.business.entities.ProductType;import com.vsoftcorp.kls.business.entities.Taluka;import com.vsoftcorp.kls.business.entities.Village;import com.vsoftcorp.kls.business.util.DateUtil;import com.vsoftcorp.kls.dataaccess.IBranchDAO;import com.vsoftcorp.kls.dataaccess.IInterestCategoryDAO;import com.vsoftcorp.kls.dataaccess.IPacsDAO;import com.vsoftcorp.kls.dataaccess.IPacsGlDAO;import com.vsoftcorp.kls.dataaccess.IProductDAO;import com.vsoftcorp.kls.dataaccess.IProductTypeDAO;import com.vsoftcorp.kls.dataaccess.IRecoveryOrderDao;import com.vsoftcorp.kls.dataaccess.factory.KLSDataAccessFactory;import com.vsoftcorp.kls.util.EntityManagerUtil;import com.vsoftcorp.time.Date;public class ProductDAOTest extends DBUnitTC {	private static final Logger logger = Logger.getLogger(ProductDAOTest.class);	public ProductDAOTest() {		super("dbunit.properties");	}	@BeforeClass	public static void setupHibernate() {		EntityManagerUtil.init("klsTestPU");	}	@AfterClass	public static void teardownHibernate() {		logger.info("After Class Teardown shutdown");		// EntityManagerUtil.closeSession();	}	@Test	public void testSaveProduct() {		logger.info("Executing the test case saveProduct()");		try {			Product product = new Product();			InterestCategory intCategory = new InterestCategory();			ProductType productType = new ProductType();			intCategory.setIntrCategoryDesc("INCAT");			IInterestCategoryDAO iDao = KLSDataAccessFactory					.getInterestCategoryDAO();			iDao.saveInterestCategory(intCategory);			product.setIntrCategory(intCategory);			productType.setDescription("PRODTYPEDESC");			productType.setAtmApplicable("Y");			productType.setInterestCategory(intCategory);			IProductTypeDAO pDao = KLSDataAccessFactory.getProductTypeDAO();			pDao.saveProductType(productType);			product.setProductType(productType);			EventTypeDefinition eventDef = new EventTypeDefinition();			eventDef.setSequenceName("IPCP");			IRecoveryOrderDao rDao = KLSDataAccessFactory.getRecoveryOrderDAO();			rDao.saveRecoverySequence(eventDef);			product.setName("PROD1");			product.setShortName("PRO");			product.setSharePercentage(new BigDecimal(2));			product.setIsPenalInterestAllowed("Y");			product.setPenalInterestOn("OS");			product.setRecoverySequence(eventDef);			Pacs pacsMaster = new Pacs();			Branch branch = new Branch();			branch.setName("Cuttack");			branch.setLocation("Patnaik Nagar");			branch.setCode("OR01");			IBranchDAO branchDao = KLSDataAccessFactory.getBranchDAO();			District district = new District();			district.setDccBankCode("HYD1");			district.setName("RangaReddy");			KLSDataAccessFactory.getDistrictDAO().saveDistrict(district);			Taluka taluka = new Taluka();			taluka.setName("AmeerPet");			taluka.setDistrict(district);			KLSDataAccessFactory.getTalukaDAO().saveTaluka(taluka);			Village village = new Village();			village.setName("SR nagar");			village.setPin(500034);			village.setTaluka(taluka);			KLSDataAccessFactory.getVillageDAO().saveVillage(village);			branchDao.saveBranch(branch);			pacsMaster.setBranch(branch);			pacsMaster.setVillage(village);			pacsMaster.setName("PAC");			pacsMaster.setLocation("hyderabad");			pacsMaster.setSecretaryName("nelson");			IPacsDAO pdao = KLSDataAccessFactory.getPacsDAO();			pdao.savePacs(pacsMaster);			IPacsGlDAO glDAO = KLSDataAccessFactory.getPacsGlDAO();			PacsGl intReceivableGL = new PacsGl();			intReceivableGL.setEnteredBy("test1");			intReceivableGL.setEnteredDate(new java.sql.Date(System					.currentTimeMillis()));			intReceivableGL.setGlCode("0000001");			intReceivableGL.setName("GLname1");			intReceivableGL.setType("I");			intReceivableGL.setPacs(pacsMaster);			glDAO.savePacsGl(intReceivableGL);			PacsGl intReceivedGL = new PacsGl();			intReceivedGL.setEnteredBy("test1");			intReceivedGL.setEnteredDate(new java.sql.Date(System					.currentTimeMillis()));			intReceivedGL.setGlCode("0000006");			intReceivedGL.setName("GLname6");			intReceivedGL.setType("I");			intReceivedGL.setPacs(pacsMaster);			glDAO.savePacsGl(intReceivedGL);			PacsGl PenalIntReceivableGL = new PacsGl();			PenalIntReceivableGL.setEnteredBy("test1");			PenalIntReceivableGL.setEnteredDate(new java.sql.Date(System					.currentTimeMillis()));			PenalIntReceivableGL.setGlCode("0000002");			PenalIntReceivableGL.setName("GLname2");			PenalIntReceivableGL.setType("I");			PenalIntReceivableGL.setPacs(pacsMaster);			glDAO.savePacsGl(PenalIntReceivableGL);			PacsGl penalIntReceivedGL = new PacsGl();			penalIntReceivedGL.setEnteredBy("test3");			penalIntReceivedGL.setEnteredDate(new java.sql.Date(System					.currentTimeMillis()));			penalIntReceivedGL.setGlCode("0000003");			penalIntReceivedGL.setName("GLname3");			penalIntReceivedGL.setType("I");			penalIntReceivedGL.setPacs(pacsMaster);			glDAO.savePacsGl(penalIntReceivedGL);			PacsGl chargesReceivableGL = new PacsGl();			chargesReceivableGL.setEnteredBy("test1");			chargesReceivableGL.setEnteredDate(new java.sql.Date(System					.currentTimeMillis()));			chargesReceivableGL.setGlCode("0000004");			chargesReceivableGL.setName("GLname4");			chargesReceivableGL.setType("I");			chargesReceivableGL.setPacs(pacsMaster);			glDAO.savePacsGl(chargesReceivableGL);			PacsGl ChargesReceivedGL = new PacsGl();			ChargesReceivedGL.setEnteredBy("test5");			ChargesReceivedGL.setEnteredDate(new java.sql.Date(System					.currentTimeMillis()));			ChargesReceivedGL.setGlCode("0000005");			ChargesReceivedGL.setName("GLname5");			ChargesReceivedGL.setType("I");			ChargesReceivedGL.setPacs(pacsMaster);			glDAO.savePacsGl(ChargesReceivedGL);			product.setIntReceivableGL(intReceivableGL);			product.setIntReceivedGL(intReceivedGL);			product.setPenalIntReceivableGL(PenalIntReceivableGL);			product.setPenalIntReceivedGL(penalIntReceivedGL);			product.setChargesReceivableGL(chargesReceivableGL);			product.setChargesReceivedGL(ChargesReceivedGL);			SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");			sdf1.setLenient(false);			java.util.Date date = sdf1.parse("2014-02-15 00:00:00");			product.setLastIntPostDate(new Date(date.getTime()));			java.util.Date date1 = sdf1.parse("2014-01-01 00:00:00");			product.setReleasedDate(new Date(date1.getTime()));			product.setLastIntPostDate(DateUtil					.getVSoftDateByString("15/02/2014"));			product.setReleasedDate(DateUtil.getVSoftDateByString("01/01/2014"));			product.setAtmApplicable("Y");			product.setReleasedFlag("Y");			IProductDAO dao = KLSDataAccessFactory.getProductMasterDAO();			dao.saveProduct(product);			IDataSet actualDataSet1 = getConnection().createDataSet();			IDataSet expectedDataSet1 = getExpectedDataSet();			ITable expected1 = null;			ITable actual1 = null;			expected1 = new SortedTable(expectedDataSet1.getTable("product"));			actual1 = actualDataSet1.getTable("product");			actual1 = new SortedTable(DefaultColumnFilter.includedColumnsTable(					actual1, expected1.getTableMetaData().getColumns()),					expected1.getTableMetaData());			Assert.assertEquals(expected1.getValue(0, "name"),					actual1.getValue(0, "name"));		} catch (Exception e) {			e.printStackTrace();			throw new RuntimeException(					"Exception thrown while running the testSaveProduct() dbunit test case.",					e.getCause());		}		logger.info("Executed the test case saveProduct()");	}	@Test	public void testUpdateProduct() {		logger.info("Executing the db unit test case updateProduct()");		try {			Product product = new Product();			product.setName("PRODUCT");			product.setShortName("PRO");			SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");			sdf1.setLenient(false);			java.util.Date date = sdf1.parse("2014-02-15 00:00:00");			product.setLastIntPostDate(new Date(date.getTime()));			java.util.Date date1 = sdf1.parse("2014-01-01 00:00:00");			product.setReleasedDate(new Date(date1.getTime()));			product.setLastIntPostDate(DateUtil					.getVSoftDateByString("15/02/2014"));			product.setReleasedDate(DateUtil.getVSoftDateByString("01/01/2014"));			product.setAtmApplicable("Y");			product.setReleasedFlag("Y");			InterestCategory interestCategory = new InterestCategory();			interestCategory.setIntrCategoryDesc("INCAT");			ProductType productType = new ProductType();			productType.setDescription("PRODTYPEDESC");			productType.setAtmApplicable("Y");			productType.setInterestCategory(interestCategory);			EventTypeDefinition eventDefinition = new EventTypeDefinition();			eventDefinition.setSequenceName("IPCP");			Pacs pac = new Pacs();			pac.setName("PACNAME");			pac.setLocation("hyderabad");			pac.setSecretaryName("nelson");			Branch branch = new Branch();			branch.setName("Cuttack");			branch.setLocation("Patnaik Nagar");			branch.setCode("OR01");			District district = new District();			district.setDccBankCode("TS1");			district.setName("Hyderabad");			Taluka taluka = new Taluka();			taluka.setName("ABC");			Village village = new Village();			village.setName("HYDERABAD");			village.setPin(500034);			IDataSet actualDataSet = getConnection().createDataSet();			IDataSet actualDataSet1 = getConnection().createDataSet();			IDataSet expectedDataSet1 = getExpectedDataSet();			ITable expected1 = null;			ITable actual = null;			ITable actual1 = null;			actual = actualDataSet.getTable("branch");			Integer branchId = (Integer) actual.getValue(0, "id");			branch.setId(branchId);			pac.setBranch(branch);			actual = actualDataSet.getTable("district");			Integer districtId = (Integer) actual.getValue(0, "id");			district.setId(districtId);			actual = actualDataSet.getTable("taluka");			Integer talukaId = (Integer) actual.getValue(0, "id");			taluka.setId(talukaId);			actual = actualDataSet.getTable("village");			Integer villageId = (Integer) actual.getValue(0, "id");			village.setId(villageId);			actual = actualDataSet1.getTable("event_type_definition");			Integer eventDefinitionId = (Integer) actual.getValue(0, "id");			eventDefinition.setId(eventDefinitionId);			product.setRecoverySequence(eventDefinition);			taluka.setDistrict(district);			village.setTaluka(taluka);			pac.setVillage(village);			actual1 = actualDataSet1.getTable("pacs");			Integer pacId = (Integer) actual1.getValue(0, "id");			pac.setId(pacId);			IProductDAO pDao = KLSDataAccessFactory.getProductMasterDAO();			IDataSet actualDataSet2 = getConnection().createDataSet();			ITable actual2 = null;			actual = actualDataSet.getTable("interest_category");			actual2 = actualDataSet2.getTable("product_type");			expected1 = new SortedTable(expectedDataSet1.getTable("product"));			Integer interestCatId = (Integer) actual.getValue(0, "id");			interestCategory.setId(interestCatId);			productType.setInterestCategory(interestCategory);			product.setIntrCategory(interestCategory);			Integer prodTypeId = (Integer) actual2.getValue(0, "id");			productType.setId(prodTypeId);			product.setProductType(productType);			PacsGl intReceivableGL = new PacsGl();			intReceivableGL.setEnteredBy("test1");			intReceivableGL.setEnteredDate(new java.sql.Date(System					.currentTimeMillis()));			intReceivableGL.setGlCode("0000001");			intReceivableGL.setName("GLname1");			intReceivableGL.setType("I");			intReceivableGL.setPacs(pac);			actual1 = actualDataSet1.getTable("pacs_gl");			BigInteger intReceivableGLId = (BigInteger) actual1.getValue(1,					"id");			intReceivableGL.setId(intReceivableGLId.longValue());			PacsGl intReceivedGL = new PacsGl();			intReceivedGL.setEnteredBy("test1");			intReceivedGL.setEnteredDate(new java.sql.Date(System					.currentTimeMillis()));			intReceivedGL.setGlCode("0000006");			intReceivedGL.setName("GLname6");			intReceivedGL.setType("I");			intReceivedGL.setPacs(pac);			actual1 = actualDataSet1.getTable("pacs_gl");			BigInteger intReceivedGLId = (BigInteger) actual1.getValue(1, "id");			intReceivedGL.setId(intReceivedGLId.longValue());			PacsGl penalIntReceivableGL = new PacsGl();			penalIntReceivableGL.setEnteredBy("test1");			penalIntReceivableGL.setEnteredDate(new java.sql.Date(System					.currentTimeMillis()));			penalIntReceivableGL.setGlCode("0000002");			penalIntReceivableGL.setName("GLname2");			penalIntReceivableGL.setType("I");			penalIntReceivableGL.setPacs(pac);			actual1 = actualDataSet1.getTable("pacs_gl");			BigInteger PenalIntReceivableGLId = (BigInteger) actual1.getValue(					1, "id");			penalIntReceivableGL.setId(PenalIntReceivableGLId.longValue());			PacsGl penalIntReceivedGL = new PacsGl();			penalIntReceivedGL.setEnteredBy("test3");			penalIntReceivedGL.setEnteredDate(new java.sql.Date(System					.currentTimeMillis()));			penalIntReceivedGL.setGlCode("0000003");			penalIntReceivedGL.setName("GLname3");			penalIntReceivedGL.setType("I");			penalIntReceivedGL.setPacs(pac);			actual1 = actualDataSet1.getTable("pacs_gl");			BigInteger PenalIntReceivedGLId = (BigInteger) actual1.getValue(1,					"id");			penalIntReceivedGL.setId(PenalIntReceivedGLId.longValue());			PacsGl chargesReceivableGL = new PacsGl();			chargesReceivableGL.setEnteredBy("test1");			chargesReceivableGL.setEnteredDate(new java.sql.Date(System					.currentTimeMillis()));			chargesReceivableGL.setGlCode("0000004");			chargesReceivableGL.setName("GLname4");			chargesReceivableGL.setType("I");			chargesReceivableGL.setPacs(pac);			actual1 = actualDataSet1.getTable("pacs_gl");			BigInteger chargesReceivableGLId = (BigInteger) actual1.getValue(1,					"id");			chargesReceivableGL.setId((chargesReceivableGLId.longValue()));			PacsGl chargesReceivedGL = new PacsGl();			chargesReceivedGL.setEnteredBy("test5");			chargesReceivedGL.setEnteredDate(new java.sql.Date(System					.currentTimeMillis()));			chargesReceivedGL.setGlCode("0000005");			chargesReceivedGL.setName("GLname5");			chargesReceivedGL.setType("I");			chargesReceivedGL.setPacs(pac);			actual1 = actualDataSet1.getTable("pacs_gl");			BigInteger chargesReceivedGLID = (BigInteger) actual1.getValue(1,					"id");			chargesReceivedGL.setId(chargesReceivedGLID.longValue());			actual1 = actualDataSet1.getTable("product");			Integer prodId = (Integer) actual1.getValue(0, "id");			product.setIntReceivableGL(intReceivableGL);			product.setIntReceivedGL(intReceivedGL);			product.setPenalIntReceivableGL(penalIntReceivableGL);			product.setPenalIntReceivedGL(penalIntReceivedGL);			product.setChargesReceivableGL(chargesReceivableGL);			product.setChargesReceivedGL(chargesReceivedGL);			product.setId(prodId);			actual1 = new SortedTable(DefaultColumnFilter.includedColumnsTable(					actual1, expected1.getTableMetaData().getColumns()),					expected1.getTableMetaData());			pDao.updateProduct(product);			actual1 = actualDataSet1.getTable("product");			Assert.assertEquals(expected1.getValue(0, "name"),					actual1.getValue(0, "name"));		} catch (Exception e) {			e.printStackTrace();			throw new RuntimeException(					"Exception thrown while running the testupdateProduct() dbunit test case.",					e.getCause());			// e.printStackTrace();		}		logger.info("Executed the db unit test case updateProduct()");	}	@Test	public void testGetProduct() {		logger.info("Start: Fetching the product data from the database in testGetProduct() method.");		try {			Product theProd = new Product();			theProd.setId(101);			IProductDAO dao = KLSDataAccessFactory.getProductMasterDAO();			logger.info("factory dao instace" + dao);			Product c = dao.getProduct(theProd,false);			Assert.assertEquals("PRODUC", c.getName().trim());		} catch (Exception e) {			logger.error("Exception while excecuting the dbuint testGetProduct : "					+ e.getMessage());			e.printStackTrace();		}	}}*/