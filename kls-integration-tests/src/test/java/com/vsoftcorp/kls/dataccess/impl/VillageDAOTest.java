/*package com.vsoftcorp.kls.dataccess.impl;import org.apache.log4j.Logger;import org.dbunit.dataset.IDataSet;import org.dbunit.dataset.ITable;import org.dbunit.dataset.SortedTable;import org.dbunit.dataset.filter.DefaultColumnFilter;import org.junit.AfterClass;import org.junit.Assert;import org.junit.BeforeClass;import org.junit.Test;import com.vsoftcorp.dbunit.DBUnitTC;import com.vsoftcorp.kls.business.entities.District;import com.vsoftcorp.kls.business.entities.Taluka;import com.vsoftcorp.kls.business.entities.Village;import com.vsoftcorp.kls.dataaccess.IDistrictDAO;import com.vsoftcorp.kls.dataaccess.ITalukaDAO;import com.vsoftcorp.kls.dataaccess.IVillageDAO;import com.vsoftcorp.kls.dataaccess.factory.KLSDataAccessFactory;import com.vsoftcorp.kls.util.EntityManagerUtil;public class VillageDAOTest extends DBUnitTC {	private static final Logger logger = Logger.getLogger(VillageDAOTest.class);	public VillageDAOTest() {		super("dbunit.properties");	}	@BeforeClass	public static void setupHibernate() {		EntityManagerUtil.init("klsTestPU");	}	@AfterClass	public static void teardownHibernate() {		logger.info("After Class Teardown shutdown");		EntityManagerUtil.closeSession();	}	@Test	public void testSaveVillage() {		logger.info("Executing the test case saveVillage()");		try {			Village village = new Village();			village.setName("HYDERABAD");			District district = new District();			district.setName("abcd");			district.setDccBankCode("DC001");			Taluka taluka = new Taluka();			taluka.setDistrict(district);			taluka.setName("TG");			village.setTaluka(taluka);			IDistrictDAO districtDao = KLSDataAccessFactory.getDistrictDAO();			ITalukaDAO talukaDao = KLSDataAccessFactory.getTalukaDAO();			IVillageDAO villageDao = KLSDataAccessFactory.getVillageDAO();			districtDao.saveDistrict(district);			talukaDao.saveTaluka(taluka);			villageDao.saveVillage(village);			IDataSet actualDataSet1 = getConnection().createDataSet();			IDataSet expectedDataSet1 = getExpectedDataSet();			ITable expected1 = null;			ITable actual1 = null;			expected1 = new SortedTable(expectedDataSet1.getTable("village"));			actual1 = actualDataSet1.getTable("village");			actual1 = new SortedTable(DefaultColumnFilter.includedColumnsTable(					actual1, expected1.getTableMetaData().getColumns()),					expected1.getTableMetaData());			Assert.assertEquals(expected1.getValue(0, "name"),					actual1.getValue(0, "name"));		} catch (Exception e) {			throw new RuntimeException(					"Exception thrown while running the testSaveVillage() dbunit test case.",					e.getCause());		}		logger.info("Executed the test case saveVillage()");	}	@Test	public void testUpdateVillage() {		logger.info("Executing the db unit test case updateVillage()");		try {			Village village = new Village();			village.setName("HYDERABAD");			Taluka taluka = new Taluka();			IVillageDAO dao = KLSDataAccessFactory.getVillageDAO();			IDataSet actualDataSet = getConnection().createDataSet();			IDataSet actualDataSet1 = getConnection().createDataSet();			IDataSet expectedDataSet1 = getExpectedDataSet();			ITable expected1 = null;			ITable actual = null;			ITable actual1 = null;			actual = actualDataSet.getTable("taluka");			expected1 = new SortedTable(expectedDataSet1.getTable("village"));			Integer talukaId = (Integer) actual.getValue(0, "id");			taluka.setId(talukaId);			village.setTaluka(taluka);			actual1 = actualDataSet1.getTable("village");			Integer villageId = (Integer) actual1.getValue(0, "id");			village.setId(villageId);			actual1 = new SortedTable(DefaultColumnFilter.includedColumnsTable(					actual1, expected1.getTableMetaData().getColumns()),					expected1.getTableMetaData());			dao.updateVillage(village);			actual1 = actualDataSet1.getTable("village");			Assert.assertEquals(expected1.getValue(0, "name"),					actual1.getValue(0, "name"));		} catch (Exception e) {			throw new RuntimeException(					"Exception thrown while running the updateVillage() dbunit test case.",					e.getCause());		}		logger.info("Executed the db unit test case updateVillage()");	}}*/